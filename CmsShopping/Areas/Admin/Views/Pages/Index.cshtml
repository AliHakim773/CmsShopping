@model IEnumerable<Page>

@{
    ViewData["Title"] = "Index";
}

<h1>PageController</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table sorting" id="pages">
    <thead>
        <tr class="home">
            <th>
                @Html.DisplayNameFor(model => model.Title) @*// if use a [Display(Name = "something")] on a property of a model or table (Page model in this case) this code is to display it*@
            </th>
            <th>
                Slug
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr id="id_@item.Id" class="@item.Slug">
            <td>
                @item.Title
            </td>
            <td>
                @item.Slug
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                @if( item.Slug != "home")
                {
                     <a class="confirmDeletion" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                }
            </td>
        </tr>
}
    </tbody>
</table>

@section Scripts {
    <script>
        @* s specific id for the whole table for specificity
        id="id_@item.Id" this is needed in the sortable shiz
         class="@item.Slug" and this is so we dont sort the home since we made it :not(home) 
         and class sorting for the table*@
        $("table#pages tbody").sortable({
            items: "tr:not(.home)",
            placeholder: "ui-state-highlight",
            update: function () {
                let ids = $("table#pages tbody").sortable("serialize");
                let url = "/admin/pages/reorder";
                $.post(url, ids, function () { });
            }
        })
    </script>

}